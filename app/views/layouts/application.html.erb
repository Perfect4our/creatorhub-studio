<!DOCTYPE html>
<html class="h-100">
  <head>
    <title><%= content_for(:title) || "CreatorHub Studio" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <% if user_signed_in? %>
      <meta name="user-id" content="<%= current_user.id %>">
    <% end %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
    
    <!-- D3.js for advanced visualizations -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- PostHog Analytics -->
    <script>
      !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
      
      posthog.init('<%= Rails.application.credentials.dig(:posthog, :public_key) %>', {
        api_host: 'https://us.i.posthog.com',
        defaults: '2025-05-24',
        // Additional configuration for privacy and performance
        opt_out_capturing_by_default: false,
        capture_pageview: true,
        capture_pageleave: true,
        disable_session_recording: false,
        loaded: function(posthog) {
          <% if user_signed_in? %>
            // Identify logged-in users for better analytics tracking
            posthog.identify("<%= current_user.id %>", {
              email: "<%= current_user.email %>",
              role: "<%= admin_user? ? 'admin' : 'user' %>",
              has_subscription: <%= current_user.stripe_subscribed? %>,
              signup_date: "<%= current_user.created_at.strftime('%Y-%m-%d') %>",
              subscription_count: <%= current_user.subscriptions.count %>
            });
            
            // Track user properties for segmentation
            posthog.people.set({
              email: "<%= current_user.email %>",
              role: "<%= admin_user? ? 'admin' : 'user' %>",
              signup_date: "<%= current_user.created_at.strftime('%Y-%m-%d') %>",
              last_seen: new Date().toISOString()
            });
          <% end %>
        }
      });
      
      // Track page views with additional context  
      document.addEventListener('turbo:load', function() {
        if (window.posthog && typeof window.posthog.capture === 'function') {
          try {
            posthog.capture('$pageview', {
              page_title: document.title,
              <% if user_signed_in? %>
              user_authenticated: true,
              user_role: "<%= admin_user? ? 'admin' : 'user' %>",
              <% else %>
              user_authenticated: false,
              <% end %>
            });
          } catch (error) {
            console.error('PostHog pageview tracking error:', error);
          }
        }
      });
      
      // Track authentication events
      <% if user_signed_in? %>
        document.addEventListener('DOMContentLoaded', function() {
          // Wait for PostHog to be loaded
          const checkPostHog = setInterval(function() {
            if (window.posthog && typeof window.posthog.capture === 'function') {
              clearInterval(checkPostHog);
              try {
                posthog.capture('user_session_active', {
                  user_id: "<%= current_user.id %>",
                  email: "<%= current_user.email %>",
                  role: "<%= admin_user? ? 'admin' : 'user' %>"
                });
              } catch (error) {
                console.error('PostHog session tracking error:', error);
              }
            }
          }, 100);
          
          // Stop checking after 10 seconds
          setTimeout(function() {
            clearInterval(checkPostHog);
          }, 10000);
        });
      <% end %>
    </script>

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "custom", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "multi_platform", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "homepage_enhanced", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <script>
      // Configure Turbo for optimized performance
      document.addEventListener('DOMContentLoaded', function() {
        try {
          // Initialize theme based on user preference or default to light
          const savedTheme = localStorage.getItem('theme') || 'light';
          
          if (savedTheme === 'dark') {
            document.body.classList.add('dark-mode');
            document.documentElement.setAttribute('data-theme', 'dark');
          } else {
            document.body.classList.remove('dark-mode');
            document.documentElement.setAttribute('data-theme', 'light');
            localStorage.setItem('theme', 'light');
          }
          
          // Set theme toggle switch based on current theme
          const themeToggle = document.getElementById('darkModeSwitch');
          if (themeToggle) {
            themeToggle.checked = savedTheme === 'dark';
          }
          
          // Configure Turbo Drive for faster navigation
          if (window.Turbo) {
            // Disable default progress bar (we have custom one)
            Turbo.config.drive.progressBarDelay = 0;
            
            // Cache more aggressively for performance
            Turbo.config.drive.cacheSize = 20;
            
            // Faster form submission handling
            Turbo.config.forms.confirm = function(message, element) {
              return Promise.resolve(window.confirm(message));
            };
          }
        } catch (error) {
          console.log('Theme initialization error:', error);
        }
      });
    </script>
  </head>

  <body data-controller="loading analytics request-manager" 
        <% if user_signed_in? %>
        data-analytics-user-id-value="<%= current_user.id %>"
        data-analytics-user-role-value="<%= admin_user? ? 'admin' : 'user' %>"
        data-analytics-user-email-value="<%= current_user.email %>"
        <% end %>>
    <div data-controller="notification">
      <div class="notification-container" data-notification-target="container">
        <% if notice %>
          <div class="notification notification-success">
            <%= notice %>
            <button type="button" class="notification-close" data-action="click->notification#close">&times;</button>
          </div>
        <% end %>
        
        <% if alert %>
          <div class="notification notification-error">
            <%= alert %>
            <button type="button" class="notification-close" data-action="click->notification#close">&times;</button>
          </div>
        <% end %>
      </div>
      
      <main>
        <%= yield %>
      </main>
    </div>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Turbo Stream for real-time updates -->
    <%= yield :page_scripts %>
    
    <script>
      // Initialize notification close buttons
      document.addEventListener('DOMContentLoaded', function() {
        try {
          document.querySelectorAll('.notification-close').forEach(button => {
            button.addEventListener('click', function() {
              this.closest('.notification').remove();
            });
          });
          
          // Performance monitoring and loading optimization
          if (window.performance && window.performance.timing) {
            const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;
            
            // Log performance metrics (can be sent to analytics)
            console.log(`Page loaded in ${loadTime}ms`);
            
            // If page loads very fast, adjust loading bar accordingly
            if (loadTime < 500 && window.loadingController) {
              window.loadingController.completeLoading(Math.max(100, loadTime * 0.2));
            }
          }
        } catch (error) {
          console.log('Notification initialization error:', error);
        }
      });
      
      // Optimize Turbo navigation events
      document.addEventListener('turbo:before-visit', function(event) {
        try {
          // Hide any open dropdowns before navigation
          document.querySelectorAll('.show').forEach(element => {
            if (element.classList.contains('time-selector-menu')) {
              element.classList.remove('show');
            }
          });
        } catch (error) {
          console.log('Turbo before-visit error:', error);
        }
      });
      
      document.addEventListener('turbo:load', function(event) {
        try {
          // Reinitialize any components that need it after Turbo navigation
          if (typeof initializeDashboardCharts === 'function') {
            initializeDashboardCharts();
          }
        } catch (error) {
          console.log('Turbo load error:', error);
        }
      });
    </script>
  </body>
</html>
