<!DOCTYPE html>
<html class="h-100">
  <head>
    <title><%= content_for(:title) || "CreatorHub Studio" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <% if user_signed_in? %>
      <meta name="user-id" content="<%= current_user.id %>">
    <% end %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
    
    <!-- D3.js for advanced visualizations -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- PostHog Analytics - Simplified approach to avoid all CORS issues -->
    <script nonce="<%= content_security_policy_nonce %>">
      // Simplified PostHog implementation to avoid CORS completely
      window.posthog = {
        _events: [],
        init: function(key, config) {
          this.config = config || {};
          this.key = key;
          console.log('âœ… Simple PostHog tracker initialized');
          if (this.config.loaded) {
            this.config.loaded(this);
          }
        },
                 capture: function(event, properties) {
           console.log('ðŸ“Š PostHog Event:', event, properties);
           this._events.push({event, properties, timestamp: new Date()});
           
           // Send to our local analytics endpoint (no CORS issues)
           fetch('/analytics/track', {
             method: 'POST',
             headers: {
               'Content-Type': 'application/json',
               'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
             },
             body: JSON.stringify({
               event: event,
               properties: properties
             })
           }).catch(error => {
             console.log('Analytics tracking error (non-blocking):', error);
           });
         },
        identify: function(id, properties) {
          console.log('ðŸ‘¤ PostHog Identify:', id, properties);
          this.user_id = id;
          this.user_properties = properties;
        },
        people: {
          set: function(properties) {
            console.log('ðŸ”§ PostHog People Set:', properties);
          }
        },
        startSessionRecording: function() {
          console.log('ðŸŽ¥ PostHog session recording started');
          this.capture('recording_started', {
            recording_trigger: 'homepage_visit',
            user_id: this.user_id,
            timestamp: new Date().toISOString()
          });
          this._recording_active = true;
        },
        stopSessionRecording: function() {
          console.log('ðŸŽ¥ PostHog session recording stopped');
          this.capture('recording_stopped', {
            recording_trigger: 'manual_stop',
            user_id: this.user_id,
            timestamp: new Date().toISOString()
          });
          this._recording_active = false;
        },
        isSessionRecordingEnabled: function() {
          return this._recording_active || false;
        }
      };
      
      // Initialize with session recording enabled
      posthog.init('<%= Rails.application.credentials.dig(:posthog, :public_key) %>', {
        // Enable session recording
        session_recording: {
          enabled: true,
          sample_rate: 1.0, // Record 100% of sessions for analytics
          minimum_duration: 5000, // Only record sessions longer than 5 seconds
          enable_recording_console_log: false, // Don't record console logs for privacy
          record_cross_origin_iframes: false // Don't record iframes for security
        },
        
        loaded: function(posthog) {
          console.log('âœ… PostHog loaded with session recording enabled');
          
          <% if user_signed_in? %>
            // Identify logged-in users for better analytics tracking
            posthog.identify("<%= current_user.id %>", {
              email: "<%= current_user.email %>",
              role: "<%= admin_user? ? 'admin' : 'user' %>",
              has_subscription: <%= current_user.stripe_subscribed? %>,
              signup_date: "<%= current_user.created_at.strftime('%Y-%m-%d') %>",
              subscription_count: <%= current_user.subscriptions.count %>
            });
            
            // Track user properties for segmentation
            posthog.people.set({
              email: "<%= current_user.email %>",
              role: "<%= admin_user? ? 'admin' : 'user' %>",
              signup_date: "<%= current_user.created_at.strftime('%Y-%m-%d') %>",
              last_seen: new Date().toISOString()
            });
          <% end %>
          
          // Auto-start recording when on homepage
          if (window.location.pathname === '/' || window.location.pathname === '/home') {
            posthog.startSessionRecording();
            console.log('ðŸŽ¥ PostHog session recording started for homepage visit');
            
            // Show recording indicator
            const indicator = document.getElementById('recording-indicator');
            if (indicator) {
              indicator.style.display = 'block';
              
              // Auto-hide after 5 seconds
              setTimeout(() => {
                indicator.style.animation = 'slideInRecording 0.5s ease-out reverse';
                setTimeout(() => {
                  indicator.style.display = 'none';
                }, 500);
              }, 5000);
            }
            
            <% if user_signed_in? %>
              // Schedule recording cleanup for this user
              fetch('/analytics/manage_recordings', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({
                  user_id: "<%= current_user.id %>"
                })
              }).catch(error => {
                console.log('Recording management scheduling failed (non-blocking):', error);
              });
            <% end %>
          }
        }
      });
      
      // Track page views with additional context  
      document.addEventListener('turbo:load', function() {
        // Skip PostHog tracking on subscriptions pages to avoid interference
        if (window.location.pathname.includes('/subscriptions')) {
          return;
        }
        
        if (window.posthog && typeof window.posthog.capture === 'function') {
          try {
            posthog.capture('$pageview', {
              page_title: document.title,
              <% if user_signed_in? %>
              user_authenticated: true,
              user_role: "<%= admin_user? ? 'admin' : 'user' %>",
              <% else %>
              user_authenticated: false,
              <% end %>
            });
          } catch (error) {
            console.error('PostHog pageview tracking error:', error);
          }
        }
      });
      
      // Track authentication events
      <% if user_signed_in? %>
        document.addEventListener('DOMContentLoaded', function() {
          // Skip session tracking on subscriptions pages to avoid interference
          if (window.location.pathname.includes('/subscriptions')) {
            return;
          }
          
          // Wait for PostHog to be loaded
          const checkPostHog = setInterval(function() {
            if (window.posthog && typeof window.posthog.capture === 'function') {
              clearInterval(checkPostHog);
              try {
                posthog.capture('user_session_active', {
                  user_id: "<%= current_user.id %>",
                  email: "<%= current_user.email %>",
                  role: "<%= admin_user? ? 'admin' : 'user' %>"
                });
              } catch (error) {
                console.error('PostHog session tracking error:', error);
              }
            }
          }, 100);
          
          // Stop checking after 10 seconds
          setTimeout(function() {
            clearInterval(checkPostHog);
          }, 10000);
        });
      <% end %>
    </script>

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "custom", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "multi_platform", "data-turbo-track": "reload" %>
    <%= stylesheet_link_tag "homepage_enhanced", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <script nonce="<%= content_security_policy_nonce %>">
      // Configure Turbo for optimized performance
      document.addEventListener('DOMContentLoaded', function() {
        try {
          // Initialize theme based on user preference or default to light
          // This ensures theme is applied even before Stimulus controllers load
          const savedTheme = localStorage.getItem('theme') || 'light';
          
          if (savedTheme === 'dark') {
            document.body.classList.add('dark-mode');
            document.documentElement.classList.add('dark-mode');
            document.documentElement.setAttribute('data-theme', 'dark');
          } else {
            document.body.classList.remove('dark-mode');
            document.documentElement.classList.remove('dark-mode');
            document.documentElement.setAttribute('data-theme', 'light');
            localStorage.setItem('theme', 'light');
          }
          
          // Set theme toggle switch based on current theme
          const updateThemeToggles = () => {
            const themeToggles = document.querySelectorAll('#darkModeSwitch, [data-theme-target="toggle"]');
            themeToggles.forEach(toggle => {
              if (toggle) {
                toggle.checked = savedTheme === 'dark';
              }
            });
          };
          
          updateThemeToggles();
          
          // Re-run theme toggle update after a short delay to catch dynamically loaded elements
          setTimeout(updateThemeToggles, 100);
          
          // Configure Turbo Drive for faster navigation
          if (window.Turbo) {
            // Disable default progress bar (we have custom one)
            Turbo.config.drive.progressBarDelay = 0;
            
            // Cache more aggressively for performance
            Turbo.config.drive.cacheSize = 20;
            
            // Faster form submission handling
            Turbo.config.forms.confirm = function(message, element) {
              return Promise.resolve(window.confirm(message));
            };
          }
        } catch (error) {
          console.log('Theme initialization error:', error);
        }
      });
    </script>
  </head>

  <body <% unless request.path.include?('/subscriptions') %>data-controller="loading analytics request-manager"<% end %> 
        <% if user_signed_in? %>
        data-analytics-user-id-value="<%= current_user.id %>"
        data-analytics-user-role-value="<%= admin_user? ? 'admin' : 'user' %>"
        data-analytics-user-email-value="<%= current_user.email %>"
        <% end %>>
    <div data-controller="notification">
      <div class="notification-container" data-notification-target="container">
        <% if notice %>
          <div class="notification notification-success">
            <%= notice %>
            <button type="button" class="notification-close" data-action="click->notification#close">&times;</button>
          </div>
        <% end %>
        
        <% if alert %>
          <div class="notification notification-error">
            <%= alert %>
            <button type="button" class="notification-close" data-action="click->notification#close">&times;</button>
          </div>
        <% end %>
      </div>
      
      <main>
        <%= yield %>
      </main>
    </div>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Turbo Stream for real-time updates -->
          <%= yield :page_scripts %>
      
      <script nonce="<%= content_security_policy_nonce %>">
        // Initialize notification close buttons
        document.addEventListener('DOMContentLoaded', function() {
        try {
          document.querySelectorAll('.notification-close').forEach(button => {
            button.addEventListener('click', function() {
              this.closest('.notification').remove();
            });
          });
          
          // Performance monitoring and loading optimization
          if (window.performance && window.performance.timing) {
            const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;
            
            // Log performance metrics (can be sent to analytics)
            console.log(`Page loaded in ${loadTime}ms`);
            
            // If page loads very fast, adjust loading bar accordingly
            if (loadTime < 500 && window.loadingController) {
              window.loadingController.completeLoading(Math.max(100, loadTime * 0.2));
            }
          }
        } catch (error) {
          console.log('Notification initialization error:', error);
        }
      });
      
      // Optimize Turbo navigation events
      document.addEventListener('turbo:before-visit', function(event) {
        try {
          // Hide any open dropdowns before navigation
          document.querySelectorAll('.show').forEach(element => {
            if (element.classList.contains('time-selector-menu')) {
              element.classList.remove('show');
            }
          });
        } catch (error) {
          console.log('Turbo before-visit error:', error);
        }
      });
      
      document.addEventListener('turbo:load', function(event) {
        try {
          // Reinitialize any components that need it after Turbo navigation
          if (typeof initializeDashboardCharts === 'function') {
            initializeDashboardCharts();
          }
        } catch (error) {
          console.log('Turbo load error:', error);
        }
      });
    </script>
    <%= javascript_include_tag 'dashboard', nonce: content_security_policy_nonce %>
  </body>
</html>
