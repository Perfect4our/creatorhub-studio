<%= render "shared/navbar" %>

<div class="container-fluid p-0">
  <div class="row g-0">
    <!-- Sidebar -->
    <div class="col-md-2 d-md-block bg-light sidebar" id="sidebar">
      <div class="sidebar-sticky">
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link active" href="<%= dashboard_path %>">
              <i class="fas fa-tachometer-alt"></i>
              Dashboard
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="<%= subscriptions_path %>">
              <i class="fas fa-link"></i>
              Linked Accounts
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="<%= videos_path %>">
              <i class="fas fa-video"></i>
              Videos
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="<%= analytics_demographics_path %>">
              <i class="fas fa-chart-bar"></i>
              Analytics
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">
              <i class="fas fa-dollar-sign"></i>
              Revenue
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="<%= settings_path %>">
              <i class="fas fa-cog"></i>
              Settings
            </a>
          </li>
          
          <!-- Platform Selector for Sidebar -->
          <li class="nav-item mt-4">
            <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">
              <span>Platforms</span>
            </h6>
          </li>
          
          <!-- All Platforms option -->
          <li class="nav-item">
            <a class="nav-link <%= @selected_platform.blank? ? 'active' : '' %>" href="<%= dashboard_path(time_window: @selected_time_window) %>">
              <i class="fas fa-globe"></i>
              All Platforms
            </a>
          </li>
          
          <!-- Individual Platform Links -->
          <% current_user.subscriptions.active.distinct.pluck(:platform).each do |platform| %>
              <li class="nav-item">
              <a class="nav-link <%= @selected_platform == platform ? 'active' : '' %>" href="<%= dashboard_path(platform: platform, time_window: @selected_time_window) %>">
                <% case platform %>
                <% when 'tiktok' %>
                  <i class="fab fa-tiktok"></i>
                <% when 'youtube' %>
                  <i class="fab fa-youtube"></i>
                <% when 'instagram' %>
                  <i class="fab fa-instagram"></i>
                <% when 'facebook' %>
                  <i class="fab fa-facebook"></i>
                <% when 'twitter' %>
                  <i class="fab fa-twitter"></i>
                <% when 'linkedin' %>
                  <i class="fab fa-linkedin"></i>
                <% when 'twitch' %>
                  <i class="fab fa-twitch"></i>
                <% else %>
                  <i class="fas fa-video"></i>
                <% end %>
                  <%= platform&.capitalize || 'Unknown' %>
                </a>
              </li>
            <% end %>
          
          <!-- Show placeholder platforms if no subscriptions -->
          <% if current_user.subscriptions.active.empty? %>
            <li class="nav-item">
              <a class="nav-link disabled text-muted" href="#">
                <i class="fab fa-tiktok"></i>
                TikTok
                <small class="d-block">Not connected</small>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled text-muted" href="#">
                <i class="fab fa-youtube"></i>
                YouTube
                <small class="d-block">Not connected</small>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled text-muted" href="#">
                <i class="fab fa-instagram"></i>
                Instagram
                <small class="d-block">Not connected</small>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled text-muted" href="#">
                <i class="fab fa-facebook"></i>
                Facebook
                <small class="d-block">Not connected</small>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled text-muted" href="#">
                <i class="fab fa-twitter"></i>
                Twitter
                <small class="d-block">Not connected</small>
              </a>
            </li>
          <% end %>
        </ul>
      </div>
    </div>
    
    <!-- Sidebar backdrop for mobile -->
    <div class="sidebar-backdrop" id="sidebarBackdrop"></div>
    
    <!-- Main content -->
    <div class="col-md-10 main-content">
      <div class="row">
        <!-- Left column - Main dashboard content -->
        <div class="col-lg-9">
      <!-- Include user ID for ActionCable -->
      <meta name="user-id" content="<%= current_user.id %>">
      
                <div class="notification-container" id="notificationContainer" data-notification-target="container"></div>
      
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">
              Dashboard
              <% if @selected_platform.present? %>
                <span class="badge bg-primary ms-2">
                  <% case @selected_platform %>
                  <% when 'tiktok' %>
                    <i class="fab fa-tiktok me-1"></i>
                  <% when 'youtube' %>
                    <i class="fab fa-youtube me-1"></i>
                  <% when 'instagram' %>
                    <i class="fab fa-instagram me-1"></i>
                  <% when 'facebook' %>
                    <i class="fab fa-facebook me-1"></i>
                  <% when 'twitter' %>
                    <i class="fab fa-twitter me-1"></i>
                  <% when 'linkedin' %>
                    <i class="fab fa-linkedin me-1"></i>
                  <% when 'twitch' %>
                    <i class="fab fa-twitch me-1"></i>
                  <% else %>
                    <i class="fas fa-video me-1"></i>
                  <% end %>
                  <%= @selected_platform.capitalize %>
                </span>
              <% end %>
            </h1>
        <div class="btn-toolbar mb-2 mb-md-0">
          <div class="dropdown me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" id="timeWindowDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <span id="selectedTimeWindowText">
                <% case @selected_time_window.to_s %>
                <% when '7' %>
                  Last 7 Days
                <% when '28' %>
                  Last 28 Days
                <% when '90' %>
                  Last 90 Days
                <% when '365' %>
                  Last 365 Days
                <% when '2025' %>
                  Year 2025
                <% when '2024' %>
                  Year 2024
                <% when 'custom' %>
                  Custom Range
                <% else %>
                  Last <%= @selected_time_window %> Days
                <% end %>
              </span>
              <i class="fas fa-chevron-down ms-1"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="timeWindowDropdown">
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '7' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: 7) %>">
                <% if @selected_time_window.to_s == '7' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Last 7 Days
              </a></li>
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '28' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: 28) %>">
                <% if @selected_time_window.to_s == '28' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Last 28 Days
              </a></li>
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '90' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: 90) %>">
                <% if @selected_time_window.to_s == '90' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Last 90 Days
              </a></li>
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '365' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: 365) %>">
                <% if @selected_time_window.to_s == '365' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Last 365 Days
              </a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '2025' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: '2025') %>">
                <% if @selected_time_window.to_s == '2025' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Year 2025
              </a></li>
              <li><a class="dropdown-item <%= @selected_time_window.to_s == '2024' ? 'active' : '' %>" href="<%= dashboard_path(platform: @selected_platform, time_window: '2024') %>">
                <% if @selected_time_window.to_s == '2024' %><i class="fas fa-check me-2 text-primary"></i><% end %>
                Year 2024
              </a></li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <a class="dropdown-item <%= @selected_time_window.to_s == 'custom' ? 'active' : '' %>" href="#" id="customRangeLink">
                  <% if @selected_time_window.to_s == 'custom' %><i class="fas fa-check me-2 text-primary"></i><% else %><i class="fas fa-calendar-alt me-2"></i><% end %>
                  Custom Range
                </a>
              </li>
            </ul>
          </div>
          <div class="tooltip-wrapper">
            <button type="button" class="btn btn-sm btn-outline-secondary me-2 btn-ripple" id="shareBtn">
              <i class="fas fa-share-alt me-1"></i> Share
            </button>
            <span class="tooltip-content">Share dashboard</span>
          </div>
          <div class="tooltip-wrapper">
            <button type="button" class="btn btn-sm btn-outline-secondary me-2 btn-ripple" id="exportBtn">
              <i class="fas fa-download me-1"></i> Export
            </button>
            <span class="tooltip-content">Export as CSV/PDF</span>
          </div>
            </div>
      </div>
      
      <!-- Real-time status banner -->
      <div id="realtime-status-container">
            <% realtime_enabled = @stats&.[](:realtime_enabled) || false %>
        <%= render "shared/realtime_status_banner", realtime_disabled: !realtime_enabled, message: "Real-time updates are currently disabled for all platforms." if defined?(realtime_enabled) && !realtime_enabled %>
      </div>
      
          <!-- Summary Panel - Always show when user has subscriptions -->
          <% if current_user.subscriptions.active.any? %>
            <div class="row mb-4">
              <div class="col-12">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">
                      <%
                        case @selected_time_window.to_s
                        when '7'
                          summary_title = "Last 7 Days Summary"
                          comparison_period = "vs previous 7 days"
                        when '28'
                          summary_title = "Last 28 Days Summary"
                          comparison_period = "vs previous 28 days"
                        when '90'
                          summary_title = "Last 90 Days Summary"
                          comparison_period = "vs previous 90 days"
                        when '365'
                          summary_title = "Last 365 Days Summary"
                          comparison_period = "vs previous year"
                        when '2025'
                          summary_title = "2025 Summary"
                          comparison_period = "vs 2024"
                        when '2024'
                          summary_title = "2024 Summary"
                          comparison_period = "vs 2023"
                        when 'custom'
                          if defined?(@start_date) && defined?(@end_date) && @start_date && @end_date
                            if @start_date == @end_date
                              summary_title = "#{@start_date.strftime('%B %d, %Y')} Summary"
                              comparison_period = "single day"
                            elsif @start_date.year == @end_date.year
                              if @start_date.month == @end_date.month
                                summary_title = "#{@start_date.strftime('%B %d')} - #{@end_date.strftime('%d, %Y')} Summary"
                              else
                                summary_title = "#{@start_date.strftime('%b %d')} - #{@end_date.strftime('%b %d, %Y')} Summary"
                              end
                            else
                              summary_title = "#{@start_date.strftime('%b %d, %Y')} - #{@end_date.strftime('%b %d, %Y')} Summary"
                            end
                            days_diff = (@end_date - @start_date).to_i + 1
                            comparison_period = "vs previous #{days_diff} days"
                          else
                            summary_title = "Custom Range Summary"
                            comparison_period = "vs previous period"
                          end
                        else
                          summary_title = "Last #{@selected_time_window} Days Summary"
                          comparison_period = "vs previous #{@selected_time_window} days"
                        end
                      %>
                      <%= summary_title %>
                    </h5>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-3 col-sm-6 mb-3">
                        <div class="summary-metric">
                          <div class="metric-value">
                            <h3><%= format_large_number(@stats[:views] || 0) %></h3>
                            <% if @stats[:views_growth].present? %>
                              <div class="metric-change <%= @stats[:views_growth] >= 0 ? 'positive' : 'negative' %>">
                                <i class="fas fa-arrow-<%= @stats[:views_growth] >= 0 ? 'up' : 'down' %>"></i>
                                <span><%= @stats[:views_growth] >= 0 ? '+' : '' %><%= @stats[:views_growth].round(1) %>%</span>
                              </div>
                            <% else %>
                              <div class="metric-change coming-soon">
                                <i class="fas fa-clock"></i>
                                <span>Coming Soon</span>
                              </div>
                            <% end %>
                          </div>
                          <div class="metric-label">Total Views</div>
                          <div class="metric-sublabel"><%= comparison_period %></div>
                        </div>
                      </div>
                      <div class="col-md-3 col-sm-6 mb-3">
                        <div class="summary-metric">
                          <div class="metric-value">
                            <h3>Coming Soon</h3>
                            <div class="metric-change coming-soon">
                              <i class="fas fa-clock"></i>
                              <span>Coming Soon</span>
                            </div>
                          </div>
                          <div class="metric-label">Watch Time</div>
                          <div class="metric-sublabel"><%= comparison_period %></div>
                        </div>
                      </div>
                      <div class="col-md-3 col-sm-6 mb-3">
                        <div class="summary-metric">
                          <div class="metric-value">
                            <h3><%= format_large_number(@stats[:followers] || 0) %></h3>
                            <% if @stats[:followers_growth].present? %>
                              <div class="metric-change <%= @stats[:followers_growth] >= 0 ? 'positive' : 'negative' %>">
                                <i class="fas fa-arrow-<%= @stats[:followers_growth] >= 0 ? 'up' : 'down' %>"></i>
                                <span><%= @stats[:followers_growth] >= 0 ? '+' : '' %><%= @stats[:followers_growth].round(1) %>%</span>
                              </div>
                            <% else %>
                              <div class="metric-change coming-soon">
                                <i class="fas fa-clock"></i>
                                <span>Coming Soon</span>
                              </div>
                            <% end %>
                          </div>
                          <div class="metric-label">Subscribers</div>
                          <div class="metric-sublabel"><%= comparison_period %></div>
                        </div>
                      </div>
                      <div class="col-md-3 col-sm-6 mb-3">
                        <div class="summary-metric">
                          <div class="metric-value">
                            <h3>$0.00</h3>
                            <div class="metric-change coming-soon">
                              <i class="fas fa-clock"></i>
                              <span>Coming Soon</span>
                            </div>
                          </div>
                          <div class="metric-label">Revenue</div>
                          <div class="metric-sublabel"><%= comparison_period %></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Views Chart -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">Views Over Time (<%= summary_title.gsub(' Summary', '') %>)</h5>
                  </div>
                  <div class="card-body">
                    <% has_enough_data = @platform_data&.values&.any? { |data| data[:has_enough_data] } %>
                    <% if has_enough_data %>
                      <div class="chart-container">
                        <canvas id="mainViewsChart" height="300"></canvas>
                      </div>
                    <% else %>
                      <div class="text-center py-5">
                        <i class="fas fa-chart-line text-muted mb-3" style="font-size: 3rem;"></i>
                        <h5 class="text-muted">Historical Data Coming Soon</h5>
                        <p class="text-muted mb-0">We need a few days of data to show meaningful trends.</p>
                        <p class="text-muted">Check back tomorrow for your first daily growth chart!</p>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Platform Insights Panel -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">Platform Insights</h5>
                  </div>
                  <div class="card-body">
                    <%= render "shared/platform_insights", 
                        selected_platform: @selected_platform, 
                        stats: @stats, 
                        platform_stats: @platform_stats,
                        analytics_data: @analytics_data,
                        time_window: @selected_time_window %>
                  </div>
                </div>
              </div>
            </div>
          <% end %>
        </div>
        
        <!-- Right column - Realtime Panel -->
        <div class="col-lg-3">
          <div class="realtime-panel sticky-top">
            <% if current_user.subscriptions.active.any? %>
              <%= render "shared/realtime_stats", stats: @stats %>
            <% else %>
              <!-- No data placeholder -->
              <div class="card">
                <div class="card-body text-center py-4">
                  <i class="fas fa-chart-line text-muted mb-3" style="font-size: 2rem;"></i>
                  <h6>Real-time Analytics</h6>
                  <p class="text-muted small">Connect accounts to see live data</p>
                </div>
              </div>
            <% end %>
          </div>
        </div>
              </div>
      
      <!-- Platform tabs section removed to fix syntax errors -->
    </div>
  </div>
</div>

<!-- Mobile sidebar toggle button -->
<div class="sidebar-toggle d-md-none" id="mobileToggleBtn">
  <i class="fas fa-bars"></i>
</div>

<%= render "shared/footer" %>

<% content_for :page_scripts do %>
  <script>
    // Use a unique namespace to avoid conflicts
    window.TikTokStudio = window.TikTokStudio || {};
    
    function initializeDashboardCharts() {
      // Main Views Chart - only initialize if element exists
      const mainChartCanvas = document.getElementById('mainViewsChart');
      if (mainChartCanvas && typeof Chart !== 'undefined') {
        // Destroy any existing chart instance
        if (window.TikTokStudio.mainChart) {
          window.TikTokStudio.mainChart.destroy();
          window.TikTokStudio.mainChart = null;
        }
        
        // Also check Chart.js registry for existing charts
        const existingMainChart = Chart.getChart(mainChartCanvas);
        if (existingMainChart) {
          existingMainChart.destroy();
        }
        
        try {
          const mainCtx = mainChartCanvas.getContext('2d');
          if (!mainCtx) return;
        
        <% if @platform_stats&.present? %>
          const mainChartData = {
            labels: <%= raw @chart_labels.to_json %>,
                datasets: [
              <% @platform_stats.keys.each_with_index do |platform, index| %>
                {
                  label: '<%= platform.capitalize %> Views',
                  data: <%= raw (@platform_data[platform][:chart_data][:views] rescue []).to_json %>,
                  borderColor: '<%= ['#ee1d52', '#ff0000', '#8b3ab8', '#1da1f2', '#4267b2', '#0077b5', '#6441a5'][index] %>',
                  backgroundColor: '<%= ['#ee1d52', '#ff0000', '#8b3ab8', '#1da1f2', '#4267b2', '#0077b5', '#6441a5'][index] %>20',
                    tension: 0.4,
                  fill: false,
                  pointRadius: 4,
                  pointHoverRadius: 8
                }<%= index < @platform_stats.keys.length - 1 ? ',' : '' %>
              <% end %>
            ]
          };
          
          window.TikTokStudio.mainChart = new Chart(mainCtx, {
            type: 'line',
            data: mainChartData,
              options: {
                responsive: true,
              maintainAspectRatio: false,
                interaction: {
                  mode: 'index',
                  intersect: false,
                },
              scales: {
                x: {
                  display: true,
                  title: {
                    display: true,
                    text: 'Date'
                  }
                },
                y: {
                  beginAtZero: false,
                    title: {
                      display: true,
                    text: 'Total Views'
                  },
                  ticks: {
                    callback: function(value) {
                      if (value >= 1000000) {
                        return (value / 1000000).toFixed(1) + 'M';
                      } else if (value >= 1000) {
                        return (value / 1000).toFixed(1) + 'K';
                      }
                      return value.toLocaleString();
                    }
                  }
                }
              },
              plugins: {
                legend: {
                  position: 'bottom'
                },
                title: {
                  display: true,
                  text: 'Daily View Tracking (Public Data)',
                  font: {
                    size: 16,
                    weight: 'bold'
                  }
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      let label = context.dataset.label || '';
                      if (label) {
                        label += ': ';
                      }
                      if (context.parsed.y !== null) {
                        label += context.parsed.y.toLocaleString() + ' views';
                      }
                      return label;
                    }
                    }
                  }
                }
              }
            });
        <% else %>
          // No data available - show empty chart
          window.TikTokStudio.mainChart = new Chart(mainCtx, {
            type: 'line',
            data: {
              labels: [],
              datasets: []
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: false
                }
              }
            }
          });
        <% end %>
        } catch (error) {
          console.warn('Could not initialize main chart:', error);
        }
      }
      
      // Initialize other dashboard functionality
      initializeDashboardUI();
    }
    
    function initializeDashboardUI() {
      // Chart period buttons and update function
      window.updateChart = function(days) {
        // Update active button
        document.querySelectorAll('.chart-controls .btn').forEach(btn => {
          btn.classList.remove('active');
        });
        event.target.classList.add('active');
        
        // Reload page with new time window
        const url = new URL(window.location);
        url.searchParams.set('time_window', days);
        window.location.href = url.toString();
      };
      
      document.querySelectorAll('[data-chart-period]').forEach(button => {
        button.addEventListener('click', function() {
          document.querySelectorAll('[data-chart-period]').forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          const period = this.getAttribute('data-chart-period');
          updateChart(period);
        });
      });
      
      // Share and Export buttons
      const shareBtn = document.getElementById('shareBtn');
      if (shareBtn) {
        shareBtn.addEventListener('click', function() {
          alert('Sharing options will be available soon!');
        });
      }
      
      const exportBtn = document.getElementById('exportBtn');
      if (exportBtn) {
        exportBtn.addEventListener('click', function() {
          alert('Exporting data will be available soon!');
        });
      }
      
      // Mobile sidebar toggle
      const sidebar = document.getElementById('sidebar');
      const sidebarBackdrop = document.getElementById('sidebarBackdrop');
      const mobileToggleBtn = document.getElementById('mobileToggleBtn');
      
      function toggleSidebar() {
        if (sidebar && sidebarBackdrop) {
        sidebar.classList.toggle('show');
        sidebarBackdrop.classList.toggle('show');
        }
      }
      
      if (mobileToggleBtn) {
        mobileToggleBtn.addEventListener('click', toggleSidebar);
      }
      
      if (sidebarBackdrop) {
        sidebarBackdrop.addEventListener('click', toggleSidebar);
      }
      
      // Close sidebar on window resize if in desktop mode
      window.addEventListener('resize', function() {
        if (window.innerWidth >= 768 && sidebar && sidebar.classList.contains('show')) {
          sidebar.classList.remove('show');
          if (sidebarBackdrop) {
          sidebarBackdrop.classList.remove('show');
          }
        }
      });
      
      // Video search functionality
      const videoSearchInput = document.getElementById('videoSearch');
      if (videoSearchInput) {
        let searchTimeout;
        let searchResults = [];
        
        // Collect all videos for search
        const allVideos = [];
        <% if @platform_videos.present? %>
          <% @platform_videos.each do |platform, videos| %>
            <% videos.each do |video| %>
              allVideos.push({
                title: '<%= j((video.respond_to?(:title) ? video.title : video[:title]) || "Untitled Video") %>',
                platform: '<%= platform %>',
                thumbnail: '<%= j((video.respond_to?(:thumbnail_url) ? video.thumbnail_url : video[:thumbnail_url]) || "/icon.png") %>',
                views: '<%= format_large_number((video.respond_to?(:view_count) ? video.view_count : video[:view_count]) || 0) %>',
                video_id: '<%= j(video.respond_to?(:video_id) ? video.video_id : video[:video_id]) %>',
                id: '<%= video.respond_to?(:id) ? video.id : nil %>'
              });
            <% end %>
          <% end %>
        <% end %>
        
        videoSearchInput.addEventListener('input', function(e) {
          clearTimeout(searchTimeout);
          const query = e.target.value.toLowerCase().trim();
          
          if (query.length < 2) {
            hideSearchResults();
            return;
          }
          
          searchTimeout = setTimeout(() => {
            searchResults = allVideos.filter(video => 
              video.title.toLowerCase().includes(query)
            ).slice(0, 5);
            
            showSearchResults(searchResults, query);
          }, 300);
        });
        
        function showSearchResults(results, query) {
          let searchDropdown = document.getElementById('videoSearchDropdown');
          if (!searchDropdown) {
            searchDropdown = document.createElement('div');
            searchDropdown.id = 'videoSearchDropdown';
            searchDropdown.className = 'search-dropdown';
            videoSearchInput.parentNode.appendChild(searchDropdown);
          }
          
          if (results.length === 0) {
            searchDropdown.innerHTML = '<div class="search-dropdown-item text-muted">No videos found</div>';
          } else {
            searchDropdown.innerHTML = results.map(video => `
              <div class="search-dropdown-item" data-video-id="${video.video_id}" data-platform="${video.platform}">
                <img src="${video.thumbnail}" alt="Thumbnail" class="search-thumbnail">
                <div class="search-info">
                  <div class="search-title">${highlightMatch(video.title, query)}</div>
                  <div class="search-meta">
                    <i class="fab fa-${video.platform}"></i>
                    ${video.platform} • ${video.views} views
                  </div>
                </div>
              </div>
            `).join('');
          }
          
          searchDropdown.style.display = 'block';
          
          // Add click handlers
          searchDropdown.querySelectorAll('.search-dropdown-item[data-video-id]').forEach(item => {
            item.addEventListener('click', function() {
              const platform = this.dataset.platform;
              const videoId = this.dataset.videoId;
              let videoUrl;
              
              if (video.id) {
                videoUrl = `/videos/${video.id}`;
              } else {
                switch(platform) {
                  case 'youtube':
                    videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
                    break;
                  case 'tiktok':
                    videoUrl = `https://www.tiktok.com/@username/video/${videoId}`;
                    break;
                  default:
                    return;
                }
              }
              
              window.open(videoUrl, platform === 'youtube' || platform === 'tiktok' ? '_blank' : '_self');
              hideSearchResults();
            });
          });
        }
        
        function hideSearchResults() {
          const searchDropdown = document.getElementById('videoSearchDropdown');
          if (searchDropdown) {
            searchDropdown.style.display = 'none';
          }
        }
        
        function highlightMatch(text, query) {
          const regex = new RegExp(`(${query})`, 'gi');
          return text.replace(regex, '<mark>$1</mark>');
        }
        
        // Hide dropdown when clicking outside
        document.addEventListener('click', function(e) {
          if (!videoSearchInput.contains(e.target) && !document.getElementById('videoSearchDropdown')?.contains(e.target)) {
            hideSearchResults();
          }
        });
      }
    }
    
    // Track if we've already initialized to prevent double initialization
    // Use window scope to avoid redeclaration errors
    window.dashboardInitialized = window.dashboardInitialized || false;
    window.dropdownInitialized = window.dropdownInitialized || false;
    
    function safeDashboardInit() {
      if (!window.dashboardInitialized) {
        console.log('Initializing dashboard for the first time');
        window.dashboardInitialized = true;
        initializeDashboardCharts();
      } else {
        console.log('Dashboard already initialized, skipping charts');
      }
      
      // Always re-initialize dropdown since it can get stuck
      console.log('Re-initializing dropdown');
      window.dropdownInitialized = false;
      initializeTimeWindowDropdown();
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', safeDashboardInit);
    } else {
      safeDashboardInit();
    }
    
    // Handle Turbo navigation
    document.addEventListener('turbo:load', function() {
      console.log('Turbo load event detected');
      safeDashboardInit();
    });
    
         // Handle Turbo before visits (cleanup)
     document.addEventListener('turbo:before-visit', function() {
       console.log('Turbo before visit - cleaning up');
       window.dashboardInitialized = false;
       window.dropdownInitialized = false;
       
       // Clean up intervals to prevent memory leaks
       if (window.dropdownCheckInterval) {
         clearInterval(window.dropdownCheckInterval);
         window.dropdownCheckInterval = null;
       }
       
       // Clean up any stuck dropdowns
       document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
         menu.classList.remove('show');
       });
     });
    
    // Additional safety net - periodically check if dropdown is stuck
    // Clear any existing interval to prevent memory leaks
    if (window.dropdownCheckInterval) {
      clearInterval(window.dropdownCheckInterval);
    }
    
    window.dropdownCheckInterval = setInterval(function() {
      const dropdownElement = document.getElementById('timeWindowDropdown');
      if (dropdownElement) {
        const isDisabled = dropdownElement.hasAttribute('disabled') || 
                          dropdownElement.style.pointerEvents === 'none' ||
                          dropdownElement.classList.contains('disabled');
        
                 if (isDisabled && !window.dropdownInitialized) {
          console.log('Dropdown appears stuck, attempting recovery');
          initializeTimeWindowDropdown();
        }
      }
    }, 5000); // Check every 5 seconds
    
    // Nuclear option: If dropdown gets stuck, rebuild it completely
    function rebuildStuckDropdown() {
      console.log('Rebuilding stuck dropdown from scratch...');
      
      const dropdownContainer = document.querySelector('.btn-toolbar .dropdown');
      const currentTimeWindow = '<%= @selected_time_window || "28" %>';
      const currentPlatform = '<%= @selected_platform %>';
      
      if (dropdownContainer) {
        // Store current selection text
        const currentText = document.getElementById('selectedTimeWindowText')?.textContent || 'Last 28 Days';
        
        // Completely rebuild the dropdown HTML
        dropdownContainer.innerHTML = `
          <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                  id="timeWindowDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            <span id="selectedTimeWindowText">${currentText}</span>
            <i class="fas fa-chevron-down ms-1"></i>
          </button>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="timeWindowDropdown">
            <li><a class="dropdown-item ${currentTimeWindow === '7' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=7' : '?time_window=7'}">
              ${currentTimeWindow === '7' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Last 7 Days
            </a></li>
            <li><a class="dropdown-item ${currentTimeWindow === '28' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=28' : '?time_window=28'}">
              ${currentTimeWindow === '28' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Last 28 Days
            </a></li>
            <li><a class="dropdown-item ${currentTimeWindow === '90' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=90' : '?time_window=90'}">
              ${currentTimeWindow === '90' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Last 90 Days
            </a></li>
            <li><a class="dropdown-item ${currentTimeWindow === '365' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=365' : '?time_window=365'}">
              ${currentTimeWindow === '365' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Last 365 Days
            </a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item ${currentTimeWindow === '2025' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=2025' : '?time_window=2025'}">
              ${currentTimeWindow === '2025' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Year 2025
            </a></li>
            <li><a class="dropdown-item ${currentTimeWindow === '2024' ? 'active' : ''}" 
                   href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=2024' : '?time_window=2024'}">
              ${currentTimeWindow === '2024' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}
              Year 2024
            </a></li>
            <li><hr class="dropdown-divider"></li>
            <li>
              <a class="dropdown-item ${currentTimeWindow === 'custom' ? 'active' : ''}" 
                 href="#" id="customRangeLink">
                ${currentTimeWindow === 'custom' ? '<i class="fas fa-check me-2 text-primary"></i>' : '<i class="fas fa-calendar-alt me-2"></i>'}
                Custom Range
              </a>
            </li>
          </ul>
        `;
        
        // Wait a moment then try Bootstrap again, if that fails, go manual
        setTimeout(() => {
          try {
            initializeTimeWindowDropdown();
            
            // Test if it works after 1 second
            setTimeout(() => {
              const newDropdownElement = document.getElementById('timeWindowDropdown');
              if (newDropdownElement) {
                // Test with a real click
                let clicked = false;
                let opened = false;
                
                const clickHandler = () => clicked = true;
                const showHandler = () => opened = true;
                
                newDropdownElement.addEventListener('click', clickHandler, { once: true });
                newDropdownElement.addEventListener('shown.bs.dropdown', showHandler, { once: true });
                
                newDropdownElement.click();
                
                setTimeout(() => {
                  if (clicked && !opened) {
                    console.warn('Rebuilt dropdown still not working, switching to manual mode');
                    createManualDropdown();
                  } else {
                    console.log('Rebuilt dropdown working correctly');
                  }
                }, 300);
              }
            }, 1000);
            
          } catch (error) {
            console.error('Bootstrap still failing after rebuild, going manual:', error);
            createManualDropdown();
          }
        }, 500);
      }
    }
    
    // Manual dropdown implementation for when Bootstrap completely fails
    function createManualDropdown() {
      console.log('Creating manual dropdown as fallback...');
      
      const dropdownContainer = document.querySelector('.btn-toolbar .dropdown');
      if (!dropdownContainer) return;
      
      const currentTimeWindow = '<%= @selected_time_window || "28" %>';
      const currentPlatform = '<%= @selected_platform %>';
      
      function getTimeWindowText(timeWindow) {
        switch(timeWindow) {
          case '7': return 'Last 7 Days';
          case '28': return 'Last 28 Days';
          case '90': return 'Last 90 Days';
          case '365': return 'Last 365 Days';
          case '2025': return 'Year 2025';
          case '2024': return 'Year 2024';
          case 'custom': return 'Custom Range';
          default: return 'Last 28 Days';
        }
      }
      
      // Create manual dropdown HTML
      dropdownContainer.innerHTML = `
        <div class="position-relative">
          <button type="button" class="btn btn-sm btn-outline-secondary manual-dropdown-toggle" id="manualTimeDropdown">
            <span>${getTimeWindowText(currentTimeWindow)}</span>
            <i class="fas fa-chevron-down ms-1"></i>
          </button>
          <div class="manual-dropdown-menu bg-white border rounded shadow position-absolute" id="manualDropdownMenu" style="display: none; top: 100%; right: 0; min-width: 200px; z-index: 1000;">
            <a class="dropdown-item ${currentTimeWindow === '7' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=7' : '?time_window=7'}">
              ${currentTimeWindow === '7' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Last 7 Days
            </a>
            <a class="dropdown-item ${currentTimeWindow === '28' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=28' : '?time_window=28'}">
              ${currentTimeWindow === '28' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Last 28 Days
            </a>
            <a class="dropdown-item ${currentTimeWindow === '90' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=90' : '?time_window=90'}">
              ${currentTimeWindow === '90' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Last 90 Days
            </a>
            <a class="dropdown-item ${currentTimeWindow === '365' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=365' : '?time_window=365'}">
              ${currentTimeWindow === '365' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Last 365 Days
            </a>
            <hr class="dropdown-divider">
            <a class="dropdown-item ${currentTimeWindow === '2025' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=2025' : '?time_window=2025'}">
              ${currentTimeWindow === '2025' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Year 2025
            </a>
            <a class="dropdown-item ${currentTimeWindow === '2024' ? 'active' : ''}" href="/dashboard${currentPlatform ? '?platform=' + currentPlatform + '&time_window=2024' : '?time_window=2024'}">
              ${currentTimeWindow === '2024' ? '<i class="fas fa-check me-2 text-primary"></i>' : ''}Year 2024
            </a>
            <hr class="dropdown-divider">
            <a class="dropdown-item ${currentTimeWindow === 'custom' ? 'active' : ''}" href="#" id="customRangeManualLink">
              ${currentTimeWindow === 'custom' ? '<i class="fas fa-check me-2 text-primary"></i>' : '<i class="fas fa-calendar-alt me-2"></i>'}Custom Range
            </a>
          </div>
        </div>
      `;
      
      // Add manual dropdown functionality
      const toggleButton = document.getElementById('manualTimeDropdown');
      const dropdownMenu = document.getElementById('manualDropdownMenu');
      
      if (toggleButton && dropdownMenu) {
        toggleButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const isVisible = dropdownMenu.style.display === 'block';
          
          // Hide all other dropdowns
          document.querySelectorAll('.manual-dropdown-menu').forEach(menu => {
            menu.style.display = 'none';
          });
          
          // Toggle this dropdown
          dropdownMenu.style.display = isVisible ? 'none' : 'block';
          console.log('Manual dropdown toggled:', !isVisible);
        });
        
        // Close on outside click
        document.addEventListener('click', function(e) {
          if (!dropdownContainer.contains(e.target)) {
            dropdownMenu.style.display = 'none';
          }
        });
        
        // Handle custom range link
        const customRangeLink = document.getElementById('customRangeManualLink');
        if (customRangeLink) {
          customRangeLink.addEventListener('click', function(e) {
            e.preventDefault();
            showCustomDatePicker();
          });
        }
      }
      
      // Show success notification
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #17a2b8;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        z-index: 9999;
        font-size: 14px;
      `;
      notification.textContent = 'Manual dropdown activated!';
      document.body.appendChild(notification);
      
      setTimeout(() => notification.remove(), 3000);
      
      // Add click event listener to detect when dropdown should work but doesn't
      document.addEventListener('click', function(e) {
        const dropdownElement = document.getElementById('timeWindowDropdown');
        
        if (dropdownElement && e.target === dropdownElement) {
          console.log('Dropdown button clicked');
          
          // Check if dropdown should be working but isn't
          setTimeout(function() {
            const dropdownMenu = document.querySelector('#timeWindowDropdown + .dropdown-menu');
            const isShowing = dropdownMenu && dropdownMenu.classList.contains('show');
            
            if (!isShowing) {
              console.warn('Dropdown should have opened but did not. Attempting rebuild...');
              setTimeout(() => {
                rebuildStuckDropdown();
              }, 100);
            }
          }, 300); // Give it time to open normally
        }
      });
      
      // Emergency recovery: Ctrl+Shift+R to force manual dropdown
      document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'R') {
          e.preventDefault();
          console.log('Emergency manual dropdown triggered by user');
          createManualDropdown();
        }
      });
    }
    
    // Initialize dropdown and custom date picker - needs to be initialized on every page load
    function initializeTimeWindowDropdown() {
      console.log('Initializing time window dropdown...');
      
      // Use a longer delay to ensure Bootstrap is fully loaded and DOM is stable
      setTimeout(function() {
        const dropdownElement = document.getElementById('timeWindowDropdown');
        const dropdownMenu = document.querySelector('#timeWindowDropdown + .dropdown-menu');
        
        if (!dropdownElement) {
          console.warn('Dropdown element not found');
          return;
        }
        
        console.log('Found dropdown element, initializing...');
        
        // Step 1: Clean up any existing Bootstrap dropdown instances
        try {
          const existingDropdown = bootstrap.Dropdown.getInstance(dropdownElement);
          if (existingDropdown) {
            console.log('Disposing existing dropdown instance');
            existingDropdown.dispose();
          }
        } catch (e) {
          console.log('No existing dropdown to dispose');
        }
        
        // Step 2: Ensure the element is in a clean state
        dropdownElement.removeAttribute('disabled');
        dropdownElement.style.pointerEvents = 'auto';
        dropdownElement.style.opacity = '1';
        dropdownElement.classList.remove('disabled');
        
        // Step 3: Remove any stuck states
        dropdownElement.setAttribute('aria-expanded', 'false');
        if (dropdownMenu) {
          dropdownMenu.classList.remove('show');
          dropdownMenu.style.display = '';
        }
        
        // Step 4: Wait a bit more for DOM to settle, then create fresh instance
        setTimeout(function() {
          try {
            if (typeof bootstrap !== 'undefined' && bootstrap.Dropdown) {
              console.log('Creating new Bootstrap dropdown instance');
              const newDropdown = new bootstrap.Dropdown(dropdownElement, {
                boundary: 'viewport',
                display: 'dynamic'
              });
              
              // Step 5: Add extra event listeners to handle edge cases
              dropdownElement.addEventListener('click', function(e) {
                console.log('Dropdown clicked');
                // Force close any other dropdowns that might be open
                document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                  if (menu !== dropdownMenu) {
                    menu.classList.remove('show');
                  }
                });
              });
              
              // Step 6: Add debugging events
              dropdownElement.addEventListener('show.bs.dropdown', function() {
                console.log('Dropdown showing');
              });
              
              dropdownElement.addEventListener('shown.bs.dropdown', function() {
                console.log('Dropdown shown');
              });
              
              dropdownElement.addEventListener('hide.bs.dropdown', function() {
                console.log('Dropdown hiding');
              });
              
                             console.log('Dropdown initialization complete');
               window.dropdownInitialized = true;
               
               // Test the dropdown immediately after initialization
               setTimeout(function() {
                 testDropdownFunctionality();
               }, 500);
            } else {
              console.error('Bootstrap is not available');
            }
          } catch (error) {
            console.error('Error initializing dropdown:', error);
            
            // Fallback: Force re-enable the dropdown with basic functionality
            dropdownElement.style.pointerEvents = 'auto';
            dropdownElement.removeAttribute('disabled');
          }
        }, 50);
      }, 200); // Increased delay
      
      // Initialize custom date range picker with better event management
      initializeCustomDatePicker();
    }
    
    function testDropdownFunctionality() {
      const dropdownElement = document.getElementById('timeWindowDropdown');
      if (dropdownElement) {
        console.log('Testing dropdown functionality...');
        
        // Add click detection to see if dropdown actually opens
        let testClicked = false;
        let testOpened = false;
        
        const testClickHandler = () => {
          testClicked = true;
          console.log('Dropdown button clicked');
        };
        
        const testShowHandler = () => {
          testOpened = true;
          console.log('Dropdown shown');
        };
        
        dropdownElement.addEventListener('click', testClickHandler, { once: true });
        dropdownElement.addEventListener('shown.bs.dropdown', testShowHandler, { once: true });
        
        // Simulate a click to test
        setTimeout(() => {
          if (dropdownElement.offsetParent !== null) { // Check if visible
            dropdownElement.click();
            
            // Check if it worked after a short delay
            setTimeout(() => {
              if (testClicked && !testOpened) {
                console.warn('Dropdown should have opened but did not. Attempting rebuild...');
                rebuildStuckDropdown();
              }
              
              // Clean up test listeners
              dropdownElement.removeEventListener('click', testClickHandler);
              dropdownElement.removeEventListener('shown.bs.dropdown', testShowHandler);
            }, 300);
          }
        }, 100);
      }
    }
    
    function initializeCustomDatePicker() {
      const customRangeLink = document.getElementById('customRangeLink');
      if (customRangeLink) {
        // Remove any existing click event listeners by cloning the element
        const newCustomRangeLink = customRangeLink.cloneNode(true);
        customRangeLink.parentNode.replaceChild(newCustomRangeLink, customRangeLink);
        
        // Add fresh event listener with better error handling
        newCustomRangeLink.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('Custom range link clicked');
          
          try {
            showCustomDatePicker();
          } catch (error) {
            console.error('Error showing custom date picker:', error);
          }
        });
      }
    }
    
    function showCustomDatePicker() {
      // Create modal if it doesn't exist
      let modal = document.getElementById('customDateModal');
      if (!modal) {
        modal = createCustomDateModal();
        document.body.appendChild(modal);
      }
      
      // Show modal
      const bootstrapModal = new bootstrap.Modal(modal);
      bootstrapModal.show();
    }
    
    function createCustomDateModal() {
      const modal = document.createElement('div');
      modal.className = 'modal fade';
      modal.id = 'customDateModal';
      modal.tabIndex = -1;
      
      const today = new Date().toISOString().split('T')[0];
      const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      modal.innerHTML = `
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">
                <i class="fas fa-calendar-alt me-2"></i>
                Custom Date Range
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <form id="customDateForm">
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate" value="${monthAgo}" max="${today}" required>
                  </div>
                  <div class="col-md-6">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate" value="${today}" max="${today}" required>
                  </div>
                </div>
                <div class="mt-3">
                  <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    Select any date range within the last 2 years
                  </small>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" onclick="applyCustomDateRange()">
                <i class="fas fa-check me-1"></i>
                Apply Range
              </button>
            </div>
          </div>
        </div>
      `;
      
      return modal;
    }
    
    function applyCustomDateRange() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (!startDate || !endDate) {
        alert('Please select both start and end dates');
        return;
      }
      
      if (new Date(startDate) > new Date(endDate)) {
        alert('Start date cannot be after end date');
        return;
      }
      
      // Navigate to dashboard with custom date range
      const url = new URL(window.location);
      url.searchParams.set('time_window', 'custom');
      url.searchParams.set('start_date', startDate);
      url.searchParams.set('end_date', endDate);
      
      window.location.href = url.toString();
    }
  </script>
<% end %>
